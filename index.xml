<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>semiosis</title>
    <link>http://semiosis.github.io/</link>
    <description>Recent content on semiosis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 15 Jul 2021 00:00:00 +1200</lastBuildDate><atom:link href="http://semiosis.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Imagery for Pen.el with CLIP and inspired from Myst: The Book of Atrus</title>
      <link>http://semiosis.github.io/posts/creating-some-imagery-for-pen-el-with-clip/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/creating-some-imagery-for-pen-el-with-clip/</guid>
      <description>Original source material https://generative.ink/posts/alchemical-marriage-gpt-3-x-clip/#you-spin-worlds-together-and-untwine-them  Summary I follow the same instructions as in the aforementioned article to generate some imagery for Pen.el.
 Project code https://github.com/semiosis/pen.el/ Tutorial and exhibition https://mullikine.github.io/posts/pen-tutorial/ Join discord https://discord.gg/HH6PY27d  Thoughts Using Pen to generate a programming environment using a LM. NL is the easiest to use code for transforming images, programming languages and NLs. That&amp;rsquo;s why Pen exists, to be a shell for creativity, provenance and intelligibility, so as to not get lost in the interactive fiction.</description>
    </item>
    
    <item>
      <title>Pen Tutorial</title>
      <link>http://semiosis.github.io/posts/pen-tutorial/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/pen-tutorial/</guid>
      <description>Summary This is a tutorial for how to use pen.el.
The following command starts pen.el. You only need to have docker installed and an OpenAI GPT-3 key to try this out.
1 2 3 4  docker run --rm -ti --entrypoint= semiosis/pen.el:latest ./run.sh # And to update the image docker pull semiosis/pen.el:latest   1 2 3 4 5 6  # For windows docker.exe run --rm -ti --entrypoint= semiosis/pen.el:latest .</description>
    </item>
    
    <item>
      <title>Pen (Prompt Engineering in Emacs)</title>
      <link>http://semiosis.github.io/pen/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/pen/</guid>
      <description>Introducing Pen I start a GitHub project to deploy pen.el.
 GitHub project GitHub - semiosis/pen.el: pen.el is a package for prompt engineering in emacs. It facilitates the creation, ongoing development, discovery and usage of prompts to a language model such as OpenAI&amp;rsquo;s GPT-3 or EleutherAI&amp;rsquo;s GPT-j. Project timeline and objectives https://github.com/semiosis/pen.el/tree/master/docs Prompt README prompts/README.org at master semiosis/prompts GitHub Tutorial https://semiosis.github.io/posts/pen-tutorial/   1 2 3 4  docker run --rm -ti --entrypoint= semiosis/pen.</description>
    </item>
    
    <item>
      <title>Pen (Prompt Engineering in Emacs)</title>
      <link>http://semiosis.github.io/posts/pen/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/pen/</guid>
      <description>Introducing Pen I start a GitHub project to deploy pen.el.
 GitHub project GitHub - semiosis/pen.el: pen.el is a package for prompt engineering in emacs. It facilitates the creation, ongoing development, discovery and usage of prompts to a language model such as OpenAI&amp;rsquo;s GPT-3 or EleutherAI&amp;rsquo;s GPT-j. Project timeline and objectives https://github.com/semiosis/pen.el/tree/master/docs Prompt README prompts/README.org at master semiosis/prompts GitHub Tutorial https://semiosis.github.io/posts/pen-tutorial/   1 2 3 4  docker run --rm -ti --entrypoint= semiosis/pen.</description>
    </item>
    
    <item>
      <title>TomatoBear Story</title>
      <link>http://semiosis.github.io/stories/tomatobear-story/</link>
      <pubDate>Tue, 29 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/stories/tomatobear-story/</guid>
      <description>The unfolding story https://github.com/semiosis/tomato-bear-story Story origins https://github.com/semiosis/tomato-bear-story/blob/master/docs/28.06.21/story-origins.org  Perspective Stories will auto-complete one day By this, I mean, if I place an incomplete story on GitHub, this will autocomplete one day because an AGI will go looking for it, find it on GitHub and publish the completed version somewhere, but I can be working on it now, if I want.
Therefore, I must focus on connecting things to sources of immutable truth.</description>
    </item>
    
    <item>
      <title>The Semiosis of Angels</title>
      <link>http://semiosis.github.io/reviews/the-semiosis-of-angels/</link>
      <pubDate>Mon, 28 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/the-semiosis-of-angels/</guid>
      <description>Books in question:  The Semiosis of Angels by John Deely (2004) (PDF) Freedom by Daniel Suarez (PDF)    |:ϝ∷¦ϝ This excerpt:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  Or, to put it perhaps more plainly, can semiosis extend even beyond the world of matter and motion, to achieve its effect and proper work also in a realm of pure spirits bodiless from the start?</description>
    </item>
    
    <item>
      <title>Representing multiverses with Datomic</title>
      <link>http://semiosis.github.io/posts/representing-multiverses-with-datomic/</link>
      <pubDate>Sat, 26 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/representing-multiverses-with-datomic/</guid>
      <description>Related articles  Language models are multiverse generators :: Moire  |:ϝ∷¦ϝ&amp;rsquo;s blog post on exploring language models.   Datomic with Rich Hickey - YouTube Writing Datomic in Clojure - Rich Hickey - YouTube richhickey.md GitHub  Rich Hickey on becoming a better developer   Notes: https://github.com/semiosis/code-org-tidbits/blob/master/datomic/basic-query.    Project code https://github.com/semiosis/pen.el/  Summary After reading |:ϝ∷¦ϝ&amp;rsquo;s blog article LMs are multiverse generators :: Moire, I decided to take a closer look into Datomic as a possible store for LM generations.</description>
    </item>
    
    <item>
      <title>explainshell with GPT-3</title>
      <link>http://semiosis.github.io/posts/explainshell-with-gpt-3/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/explainshell-with-gpt-3/</guid>
      <description>Summary I make a simple GPT-3 prompt to explain shell code while using emacs.
It mimics the functionality of explainshell but it&amp;rsquo;s able to also describe the purpose of commands with syntax and those that are semi-baked or pseudocode.
 Related https://mullikine.github.io/posts/crontab-guru-in-emacs/  Demo  --  Prompt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135  in-development: no title: &amp;#34;explain a shell command&amp;#34; issues: design-patterns: # future-titles: &amp;#34;&amp;#34; # aims: doc: &amp;#34;Explain what a shell command does&amp;#34; # aims: |+ # - More abstractive rewording prompt-version: 1 # &amp;lt;:pp&amp;gt; defines a point where the following # text is concatenated before the postprocessor # is run.</description>
    </item>
    
    <item>
      <title>nlsh (Natural Language Shell) with GPT-3</title>
      <link>http://semiosis.github.io/posts/nlsh-natural-language-shell/</link>
      <pubDate>Wed, 16 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/nlsh-natural-language-shell/</guid>
      <description>Summary I extend my openai-complete script with REPL capabilities and use it to create parameterised nlsh REPLs for different Operating Systems.
I use comint, the emacs mode for managing REPLs and rlwrap to manage history and allow me to run the REPL without emacs.
I also generalise it within my prompt description format as &amp;ldquo;conversation mode&amp;rdquo; which enables me to have rolling conversations with a prompt.
So far, I have not implemented any kind of pseudo-memory system for rolling conversation.</description>
    </item>
    
    <item>
      <title>GPT-3 assistants for emacs modes</title>
      <link>http://semiosis.github.io/posts/gpt-3-assistants-for-emacs-modes/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/gpt-3-assistants-for-emacs-modes/</guid>
      <description>Summary In this article I will show how I transition from using shell script to emacs lisp with my &amp;lsquo;any topic&amp;rsquo; tutor in emacs lisp.
I am working on integrating GPT-3, GPT-j and more GPT completion engines into emacs, and connecting more and more emacs packages to GPT-3.
1 2  # Latest docker image of =pen.el= docker run --rm -ti --entrypoint= semiosis/pen.el:latest ./run.sh   Some ideas I have:</description>
    </item>
    
    <item>
      <title>Generate graphviz and prolog from org-brain</title>
      <link>http://semiosis.github.io/posts/generate-graphviz-and-prolog-from-org-brain/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/generate-graphviz-and-prolog-from-org-brain/</guid>
      <description>Summary I would like to be creating graphs interactively with org-brain and then using them to generate graphviz, plantuml and mermaid diagrams, and also knowledge bases with prolog.
Why Prolog? Prolog is incredibly useful for querying KBs. If I plan on working for a large corporation with their own ontologies and knowledge graphs, then I will want to be skilled with Prolog.
Graphviz  --  A generated graphviz neato diagram This has been generated from an org-brain.</description>
    </item>
    
    <item>
      <title>Network exploration with nmap and emacs</title>
      <link>http://semiosis.github.io/posts/network-exploration-with-nmap-and-emacs/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/network-exploration-with-nmap-and-emacs/</guid>
      <description>Summary I create some scripts based on nmap for network exploration. I then make user interfaces for their output based on tabulated-list-mode. I create some bindings to operate on the tabulated nmap output.
Demo  --  Scripts nmap wrapper 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  #!</description>
    </item>
    
    <item>
      <title>Subjects and Universal Grammar</title>
      <link>http://semiosis.github.io/reviews/subjects-and-universal-grammar/</link>
      <pubDate>Mon, 03 May 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/subjects-and-universal-grammar/</guid>
      <description>  </description>
    </item>
    
    <item>
      <title>Basics of Semiotics</title>
      <link>http://semiosis.github.io/reviews/the-basics-of-semiotics/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/the-basics-of-semiotics/</guid>
      <description>Books in question: Basics of Semiotics Advances in Semiotics by John N. Deely (PDF)     Chapters read:    Literary Semiotics And The Doctrine Of Signs    Semiotics: Method Or Point Of View?    Semiosis: The Subject Matter Of Semiotic Inquiry    Signs: The Medium Of Semiosis    Zoosemiotics And Anthroposemiotics      Glossary 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  semiosis It is important to understand what I mean by semiosis.</description>
    </item>
    
    <item>
      <title>Impossible Languages</title>
      <link>http://semiosis.github.io/reviews/impossible-languages/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/impossible-languages/</guid>
      <description>Books in question:  The Boundaries of Babel (The Brain and the Enigma of Impossible Languages) by Andrea Moro (2008) (PDF) Impossible Languages by Andrea Moro (2016) (PDF)    Glossary:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41  universal grammar Arguments for: - Convergence neurobiological correlates https://mitpress.</description>
    </item>
    
    <item>
      <title>Auto-suggest tooling to handle ports on a network</title>
      <link>http://semiosis.github.io/posts/auto-suggest-tooling-to-handle-ports-on-a-network/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/auto-suggest-tooling-to-handle-ports-on-a-network/</guid>
      <description>Summary Given a server (default localhost), suggest tooling to handle said ports.
For example, if you are running a postgres server, suggest pgcli (a TUI) to allow you to connect to it.
Be more intelligent than this, though.
Tools to accommodate  https://github.com/dbcli/mycli https://github.com/dbcli/pgcli  Files too somehow?  https://github.com/dbcli/litecli  elisp Detect ports shell n-list-open-ports
1 2 3 4 5 6 7 8 9 10 11 12  #!/bin/bash export TTY ( hs &amp;#34;$(basename &amp;#34;$0&amp;#34;)&amp;#34; &amp;#34;$@&amp;#34; &amp;#34;#&amp;#34; &amp;#34;&amp;lt;==&amp;#34; &amp;#34;$(ps -o comm= $PPID)&amp;#34; 0&amp;lt;/dev/null ) &amp;amp;&amp;gt;/dev/null hn=&amp;#34;$1&amp;#34; : &amp;#34;${hn:=&amp;#34;localhost&amp;#34;}&amp;#34; { echo &amp;#34;Port State Service&amp;#34; sudo nmap -sT -O &amp;#34;$hn&amp;#34; | sed &amp;#34;0,/^PORT /{d}&amp;#34; | sed &amp;#34;/^[^0-9]\\+/,\$d&amp;#34; } | sed &amp;#34;s/ \\+/,/g&amp;#34; | pavs   ports-tablist This generates a CSV.</description>
    </item>
    
    <item>
      <title>Prolog and Natural-Language Analysis</title>
      <link>http://semiosis.github.io/reviews/prolog-and-natural-language-analysis/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/prolog-and-natural-language-analysis/</guid>
      <description>Book in question Prolog and Natural-Language Analysis by Fernando C. N. Pereira and Stuart M. Shieber (PDF) Notes on Semantic Nets and Frames http://www.eecs.qmul.ac.uk/~mmh/AINotes/AINotes4.pdf  Review This book has been interesting so far.
On reading the 1st chapter, I discovered how to build Semantic Networks in prolog.
On reading the 2nd chapter I realised I would like to make a NL parser in prolog. It would a fast way to explore building my own programmatic (as opposed to transformer-based) NL parser.</description>
    </item>
    
    <item>
      <title>Zero-shot NLP in Clojure</title>
      <link>http://semiosis.github.io/posts/zero-shot-nlp-in-clojure/</link>
      <pubDate>Fri, 30 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/zero-shot-nlp-in-clojure/</guid>
      <description>Original article http://gigasquidsoftware.com/blog/2021/03/15/breakfast-with-zero-shot-nlp/ Code http://github.com/mullikine/zero-shot-nlp   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  (ns zero-shot-nlp.core (:gen-class) (:require [libpython-clj2.require :refer [require-python]] [libpython-clj2.python :as py :refer [py. py.. py.-]])) (require-python &amp;#39;[transformers :bind-ns]) (require &amp;#39;[clojure.pprint :as p]) (use &amp;#39;[clojure.java.shell :only [sh]]) ;; (in-ns &amp;#39;clojure.pprint) (defn -main &amp;#34;I classify stuff.&amp;#34; [&amp;amp; args] ;; import transformers; transformers.</description>
    </item>
    
    <item>
      <title>Universal file parser and query tool in emacs</title>
      <link>http://semiosis.github.io/posts/universal-file-parser-in-emacs/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/universal-file-parser-in-emacs/</guid>
      <description>Summary I make a way to get a more abstract representation of any type of file or buffer in emacs utilising parsers, antlr4 in particular.
I also want to be able to query the contents of the source code.
I also want to be able to query prose programmatically.
Motivation In the past I have used ctags to get simple lists of source code components such as functions and classes. I would like to have much finer control over queries to source code.</description>
    </item>
    
    <item>
      <title>Building a Clojure environment in emacs</title>
      <link>http://semiosis.github.io/posts/building-a-clojure-environment-in-emacs/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/building-a-clojure-environment-in-emacs/</guid>
      <description>Summary  I install/learn some existing tooling I create some tools for missing functionality  Missing functionality  Google (semantic) search for clojure libaries / versions  clj-refactor.el lists all libraries on clojars, but you have to lexically select from that &amp;ldquo;web framework&amp;rdquo; should yield lists of web framework libraries   Require a library into a source file from the dependencies imported in project.clj  Install tools  https://github.com/clojure-emacs/clj-refactor.el  clj-refactor.</description>
    </item>
    
    <item>
      <title>Creating a clojure app with terraform and AWS Cloud</title>
      <link>http://semiosis.github.io/posts/creating-a-clojure-app-with-terraform-and-aws-cloud/</link>
      <pubDate>Tue, 27 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/creating-a-clojure-app-with-terraform-and-aws-cloud/</guid>
      <description>Summary These are the steps I have taken to automate the process of building a Web Application in Clojure and deploying said application to an AWS cluster defined by a Terraform module.
This is a work in progress.
Original article https://dzone.com/articles/deploy-a-clojure-web-application-to-aws-using-terr
I have taken steps and copied code from this article.
Design I have chosen Clojure as the language to implement the blob uploader for the following reasons:
 It is very reliable It is easy to understand REPL workflow  Live updates   One language for both the back-end and front-end It&amp;rsquo;s the language I&amp;rsquo;m growing into for most of my work It has very good support for concurrency Access to all of Java&amp;rsquo;s libraries Access to all of Python&amp;rsquo;s libraries via clj-python/libpython-clj  I was initially working with Terraform 0.</description>
    </item>
    
    <item>
      <title>Exploring Neuralink concepts with GPT-3 (WIP)</title>
      <link>http://semiosis.github.io/posts/exploring-neuralink-concepts-with-gpt-3/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/exploring-neuralink-concepts-with-gpt-3/</guid>
      <description>This article is a work in progress.
Summary I create several org-brain repositories for exploratory learning and ideation.
1 2 3 4 5 6 7 8 9 10 11 12  billboard exploratory fungible ideation infogetics infrastructure-tooling neuralink open-source-alternatives reference thoughts tooling welfare-organisations   I then use GPT-3 to discuss topics and why they are important.
Mind terminal   Glossaries  http://github.com/mullikine/glossaries-gh/blob/master/biochemistry.txt http://github.com/mullikine/glossaries-gh/blob/master/brain-computer-interface-bci.txt http://github.com/mullikine/glossaries-gh/blob/master/neuralink.txt http://github.com/mullikine/glossaries-gh/blob/master/neuroscience.txt http://github.com/mullikine/glossaries-gh/blob/master/neural-engineering.txt http://github.com/mullikine/glossaries-gh/blob/master/gpt.txt http://github.com/mullikine/glossaries-gh/blob/master/ai-safety.txt http://github.</description>
    </item>
    
    <item>
      <title>GPT-3 is The Thing</title>
      <link>http://semiosis.github.io/posts/gpt-3-like-the-thing/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/gpt-3-like-the-thing/</guid>
      <description>Summary The Thing is a lot like GPT-3 due to it being extremely capable, but limited to the queries you give it.
It&amp;rsquo;s as powerful as your understanding on how to talk to it.
The Thing is a black box computer in the nomes series by Terry Pratchett.
I make reference to the first book in the series Truckers.
This book is freely available on the Internet Archive.
 Truckers by Terry Pratchett https://archive.</description>
    </item>
    
    <item>
      <title>Imaginary programming with GPT-3</title>
      <link>http://semiosis.github.io/posts/imaginary-programming-with-gpt-3/</link>
      <pubDate>Thu, 08 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/imaginary-programming-with-gpt-3/</guid>
      <description>Code https://github.com/semiosis/pen.el Prompts https://github.com/semiosis/prompts/ Disclaimer Please contribute as this is an open source project! It&amp;rsquo;s very hard to find free prompts online currently and that&amp;rsquo;s because everyone is out for themselves. Please support open source. Thank you. Glossary http://github.com/semiosis/glossaries-gh/blob/master/imaginary-programming.txt  Summary This is a demonstration of an imaginary programming environment. There may be nothing else like it in the world today.
The world needs to get ready for the next generations of Large LMs, such as GPT-4.</description>
    </item>
    
    <item>
      <title>Fictional statements of remorse with GPT-3 in the 1st and 3rd person</title>
      <link>http://semiosis.github.io/posts/fictional-statements-of-remorse-with-gpt-3/</link>
      <pubDate>Wed, 07 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/fictional-statements-of-remorse-with-gpt-3/</guid>
      <description>Summary I use GPT-3 to generate fictional statements of remorse.
It should be noted that this is only one such way that GPT-3 will upheave legal process.
RemorseBot (in the 1st person)  --  RemorseBot (in the 3rd person)  --  Prompts 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108  title: &amp;#34;Statement of remorse&amp;#34; # future-titles: &amp;#34;&amp;#34; # aims: |+ # - More abstractive rewording doc: &amp;#34;&amp;#34; # aims: |+ # - More abstractive rewording prompt-version: 1 # &amp;lt;:pp&amp;gt; defines a point where the following # text is concatenated before the postprocessor # is run.</description>
    </item>
    
    <item>
      <title>Translating with GPT-3 and Emacs</title>
      <link>http://semiosis.github.io/posts/translating-with-gpt-3-and-emacs/</link>
      <pubDate>Tue, 06 Apr 2021 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/translating-with-gpt-3-and-emacs/</guid>
      <description>Summary Sorry for the lazy blog post today. I just ask GPT3 for some subtopics of ancient roman law as I am looking for a cool word to use. I would like to know what these words mean, so I use GPT3 for that too.
Subtopics of Ancient Roman Law These were generated by GPT-3.
1 2 3 4 5  aedilitas advocatus auctoritas augur auspex caupona cena clientela contio domus ius ludos ministra mos ora otium praetor quaestio res mancipi sacerdos status suovetaurilia tabella tribunus plebis via vir    --  GPT-3 Language detection and translation  language Latin  English translation:</description>
    </item>
    
    <item>
      <title>GPT-3 mind maps with an AI tutor for any topic</title>
      <link>http://semiosis.github.io/posts/gpt-3-for-building-mind-maps-with-an-ai-tutor-for-any-topic/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/gpt-3-for-building-mind-maps-with-an-ai-tutor-for-any-topic/</guid>
      <description>Code http://github.com/semiosis/pen.el Prompts http://github.com/semiosis/prompts  Summary I combine GPT-3 with org-brain to expand on topics, suggesting subtopics and providing an interactive tutor for any topic.
Demonstration Subtopic generation I demonstrate how to explore arbitrary topics with GPT-3 by automatically generating subtopics, and then allowing you to invoke the GPT-3 tutor to answer questions within that context.
 --  Tutor demonstration  Rolling conversation is a work in progress, but on its way.</description>
    </item>
    
    <item>
      <title>Generating pickup lines with GPT-3</title>
      <link>http://semiosis.github.io/posts/generating-pickup-lines-with-gpt-3/</link>
      <pubDate>Sat, 27 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/generating-pickup-lines-with-gpt-3/</guid>
      <description>Latest version of the pick up lines prompt http://github.com/mullikine/prompts/blob/master/prompts/pick-up-line.prompt Original Pick-up-lines prompt by Jan Kolar https://www.producthunt.com/posts/500-openers-for-tinder-written-by-gpt-3 \
https://www.reddit.com/r/GPT3/comments/mdl7fl/500%5Fopeners%5Ffor%5Ftinder%5Fwritten%5Fby%5Fgpt3%5Fthe%5Fprompt/  Summary I create a prompt in my prompt description format and use it to generate some pickup lines.
Demonstration (v2 with emacs counsel integration) New results are fed into a fuzzy finder as they are generated. I can stop and select at any time.
 --  Demonstration (version 2)  --  Pick up lines with the topic &amp;ldquo;SETTLERS OF CATAN&amp;rdquo; ⌂ ⌂⌂ ━ ━ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  When playing Settlers of Catan, the shortest route is a straight line to my heart.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://semiosis.github.io/about/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/about/</guid>
      <description>Semiosis is a GitHub organisation focused on building programming languages to keep computing textual.
It is also a blog on Natural Language Processing and Formal Language Theory.
Noam Chomsky - &amp;ldquo;The machine, the ghost, and the limits of understanding&amp;rdquo; - YouTube
Shane Mulligan  Website: Bodacious Blog GitHub: https://github.com/mullikine/ CV: https://mullikine.github.io/cv/  TakaheAI  Website http://takaheai.github.io/  </description>
    </item>
    
    <item>
      <title>Examplary</title>
      <link>http://semiosis.github.io/examplary/</link>
      <pubDate>Wed, 17 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/examplary/</guid>
      <description>Examplary is an example-oriented DSL that can be used to construct and compose functions based on prompts and external String-&amp;gt;String commands.
 Emacs Lisp: http://github.com/semiosis/pen.el/blob/master/src/pen-examplary.el Clojure: http://github.com/semiosis/examplary  Using examplary, one can keep track of their various String-&amp;gt;String functions but also:
 generate prompts from an example generator design prompts using design patterns   1 2 3 4 5 6 7 8 9 10 11  fifth-generation programming language 5GL Any programming language based on problem solving using constraints given to the program, rather than using an algorithm written by a programmer.</description>
    </item>
    
    <item>
      <title>Autocompleting anything with GPT-3 in emacs</title>
      <link>http://semiosis.github.io/posts/autocompleting-anything-with-gpt-3-in-emacs/</link>
      <pubDate>Tue, 16 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/autocompleting-anything-with-gpt-3-in-emacs/</guid>
      <description>Emacs package https://github.com/semiosis/pen.el Help/developers desperately needed in developing pen.el! Prompt engineering is very easy so don&amp;rsquo;t be intimidated! Prompt http://github.com/semiosis/prompts/blob/master/prompts/generic-file-type-completion.prompt  Summary I make a prompt for the OpenAI API which completes given a file type and some preceding text.
I then make a company-mode completion function for it, and then demo its usage.
This gives me a generic completion mechanism when dealing with any type of document.
Demonstration This is GPT-3 completing some text for me.</description>
    </item>
    
    <item>
      <title>A tour of Ryan Ong&#39;s - NLP 365</title>
      <link>http://semiosis.github.io/posts/ryan-ong-nlp-365/</link>
      <pubDate>Sat, 13 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/ryan-ong-nlp-365/</guid>
      <description>Glossaries nlp-natural-language-processing.txt information-retrieval.txt fasttext.txt transformer.txt nmt-neural-machine-translation.txt information-theory.txt  Summary I go over Ryan Ong&amp;rsquo;s series on NLP, adding terms to my glossaries and reproducing what he&amp;rsquo;s done.
 Finished reading &amp;lt;2021-03-13 Sat&amp;gt;
 Day 1: What is Natural Language Processing - Ryan Ong Day 2: Damerau-Levenshtein Distance - Ryan Ong Day 3: Word Embeddings - Ryan Ong  Terms in the green text have added to my glossary.
  This is the project that introduced me to GloVe a few years ago.</description>
    </item>
    
    <item>
      <title>Look for my friend&#39;s wagon using OpenAI CLIP</title>
      <link>http://semiosis.github.io/posts/look-for-my-friend-s-wagon-using-openai-clip/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/look-for-my-friend-s-wagon-using-openai-clip/</guid>
      <description>Full demonstration I show you how easy it is to search for an arbitrary thing inside of an arbitrary youtube video.
I am blogging and recording as I am demonstrating the technology.
Skip to 3 minutes to see the magic.

Summary I am looking for my friend&amp;rsquo;s wagon in a youtube video.
 This is the video Here&amp;rsquo;s What We REALLY Think Of Your Cars 5 - YouTube  The images of various wagons should appear after I run the command which I have bound in emacs.</description>
    </item>
    
    <item>
      <title>Reading about DALL-E</title>
      <link>http://semiosis.github.io/posts/reading-about-dall-e/</link>
      <pubDate>Fri, 12 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/reading-about-dall-e/</guid>
      <description>Article https://openai.com/blog/dall-e/ Original paper https://arxiv.org/abs/2102.12092.pdf  Authors of Paper - Aditya Ramesh - Mikhail Pavlov - Gabriel Goh - Scott Gray - Chelsea Voss - Alec Radford - Mark Chen - Ilya Sutskever
Summary of DALL-E from Arxiv 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  Text-to-image generation has traditionally focused on finding better modeling assumptions for training on a fixed dataset.</description>
    </item>
    
    <item>
      <title>Context menus based on GPT-3</title>
      <link>http://semiosis.github.io/posts/context-menus-based-on-gpt-3/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/context-menus-based-on-gpt-3/</guid>
      <description>Summary I create a GPT-3 prompt for testing to see if code is Haskell and use it as a test inside emacs to suggest further functions.
 Prompt file http://github.com/semiosis/prompts/blob/master/prompts/text-is-haskell.prompt  Demonstration As you can see, GPT-3 is able to detect the language and I can use that as a test in my emacs to provide further functions. The suggested function was yet another GPT-3 prompt function for translating Haskell into Clojure.</description>
    </item>
    
    <item>
      <title>Google ngrams in emacs</title>
      <link>http://semiosis.github.io/posts/google-ngrams-in-emacs/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/google-ngrams-in-emacs/</guid>
      <description>Summary I integrate the Google ngram viewer functionality into emacs for suggesting words in context.
Demonstration I demonstrate selecting alternative middle word for the given context words.

Code custom.el configuration
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  (defcustom google-ngrams-corpus &amp;#34;&amp;#34; &amp;#34;Google ngrams corpus&amp;#34; :type &amp;#39;string :group &amp;#39;system-custom :initialize #&amp;#39;custom-initialize-default :options (list &amp;#34;15 # english 2012&amp;#34; &amp;#34;16 # english fiction&amp;#34; &amp;#34;26 # english 2019&amp;#34;) :set (lambda (_sym value) (myrc-set (tr &amp;#34;-&amp;#34; &amp;#34;_&amp;#34; (sym2str _sym)) value) (set _sym (sor value))) ;; The default :initialize is custom-initialize-reset ;; And uses the :set function ;; :initialize (lambda :get (lambda (_sym) (let* ((yaml (yamlmod-read-file &amp;#34;/home/shane/notes/myrc.</description>
    </item>
    
    <item>
      <title>spaCy in emacs</title>
      <link>http://semiosis.github.io/posts/spacy-in-emacs/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/spacy-in-emacs/</guid>
      <description>Summary I begin construction of an environment for developing with spaCy.
 Goals  spaCy pipeline builder/wizard Select and analyse text with spaCy linguistic features spaCy python playground text selection configuration of spaCy using emacs custom.el    deplacy demo  deplacy code https://github.com/KoichiYasuoka/deplacy  
Code generation and bindings 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  (defmacro etv-filter (cmd) (let* ((slug (slugify cmd)) (sym (str2sym (concat &amp;#34;etv-&amp;#34; slug)))) `(defun ,sym (&amp;amp;optional input) (interactive (list (my/selected-text))) (if (not input) (setq input (my/selected-text))) (etv (snc ,cmd input))))) (cl-loop for s in &amp;#39;(&amp;#34;partsofspeech&amp;#34; &amp;#34;entities&amp;#34; &amp;#34;displacy&amp;#34; &amp;#34;token-pos-dep&amp;#34; &amp;#34;sentiment&amp;#34; &amp;#34;segment-sentences&amp;#34;) do (eval (expand-macro `(etv-filter ,s)))) (define-key selected-keymap (kbd &amp;#34;Z n&amp;#34;) &amp;#39;ngram-query-replace) (define-key selected-keymap (kbd &amp;#34;Z S&amp;#34;) &amp;#39;sps-play-spacy) (define-key selected-keymap (kbd &amp;#34;Z P&amp;#34;) &amp;#39;etv-partsofspeech) (define-key selected-keymap (kbd &amp;#34;Z E&amp;#34;) &amp;#39;etv-entities) (define-key selected-keymap (kbd &amp;#34;Z D&amp;#34;) &amp;#39;etv-displacy) (define-key selected-keymap (kbd &amp;#34;Z T&amp;#34;) &amp;#39;etv-token-pos-dep) (define-key selected-keymap (kbd &amp;#34;Z N&amp;#34;) &amp;#39;etv-sentiment) (define-key selected-keymap (kbd &amp;#34;Z G&amp;#34;) &amp;#39;etv-segment-sentences)     Configuration yaml I store the configuration of spaCy inside a yaml file.</description>
    </item>
    
    <item>
      <title>An operating system based on GPT-3</title>
      <link>http://semiosis.github.io/posts/an-operating-system-based-on-gpt-3/</link>
      <pubDate>Mon, 08 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/an-operating-system-based-on-gpt-3/</guid>
      <description>Reference http://github.com/semiosis/examplary  Summary I assume that GPT-3 or some descendant of it will become the primary interface to the computer.
I create a configuration option to enable / disable GPT-3.
When disabled, the environment will resort to alternative means of performing tasks.
Configuration 1  vim +/&amp;#34;use_gpt3: on&amp;#34; &amp;#34;$NOTES/myrc.yaml&amp;#34;     1  vim +/&amp;#34;summarize) {&amp;#34; &amp;#34;$SCRIPTS/s&amp;#34;   If gpt3 is enabled, filter through OpenAI API abstractive summarizer Otherwise, use sumy.</description>
    </item>
    
    <item>
      <title>A natural language database using a single GPT prompt</title>
      <link>http://semiosis.github.io/posts/a-natural-language-database-using-a-single-gpt-prompt/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/a-natural-language-database-using-a-single-gpt-prompt/</guid>
      <description>Original article https://www.gwern.net/GPT-3#the-database-prompt  Summary A single prompt describes transactions to and from a database.
GPT-3 is able to answer questions about the transactions that have taken place.
GPT-3 isn&amp;rsquo;t actually a database.
The LM simply understands language so well that describing the transactions that have taken place would naturally lead to the GPT-3 response.
The prompt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55  title: &amp;#34;database example&amp;#34; doc: &amp;#34;GPT-3 as a NL interface for semantically querying logic in prose&amp;#34; prompt: |+The database begins knowing nothing.</description>
    </item>
    
    <item>
      <title>Translating Haskell to Clojure with GPT-3</title>
      <link>http://semiosis.github.io/posts/translating-haskell-to-clojure-with-gpt-3/</link>
      <pubDate>Sun, 07 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/translating-haskell-to-clojure-with-gpt-3/</guid>
      <description>Relevant material https://hyperpolyglot.org/ml  Summary Who needs hyperpolyglot when you have GPT-3?
I translate Haskell into Clojure using the following prompt.
haskell-to-clojure.prompt 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50  title: &amp;#34;Translate Haskell to Clojure&amp;#34; prompt: |+Haskell: zip (map show [1,5,9]) [&amp;#34;a&amp;#34;,&amp;#34;b&amp;#34;,&amp;#34;c&amp;#34;] Clojure: (println (map vector &amp;#39;(1 2 3) &amp;#39;(4 5 6))) Haskell: map toUpper &amp;#34;MiXeD cAsE&amp;#34; Clojure: (clojure.</description>
    </item>
    
    <item>
      <title>crontab.guru in emacs and making a prompt with GPT-3 to copy it</title>
      <link>http://semiosis.github.io/posts/crontab-guru-in-emacs/</link>
      <pubDate>Sat, 06 Mar 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/crontab-guru-in-emacs/</guid>
      <description>Related https://crontab.guru/ Author http://github.com/mullikine  Summary I build some functionality into emacs to use crontab.guru behind the scenes to interpret tab lines displaying inside of emacs, without using the web browser.
I then build a GPT-3 prompt which does exactly the same thing without crontab.guru and provide the initial script I made to examplary (my GPT-3 DSL) as an example generator, to enhance the prompt if that is needed later.</description>
    </item>
    
    <item>
      <title>Creating a playground for GPT-3 in emacs</title>
      <link>http://semiosis.github.io/posts/creating-a-playground-for-gpt-3-in-emacs/</link>
      <pubDate>Thu, 18 Feb 2021 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/creating-a-playground-for-gpt-3-in-emacs/</guid>
      <description>Code https://github.com/mullikine/pen.el Prompts https://github.com/mullikine/prompts meetup.com event https://www.meetup.com/Code-Craft-Dunedin/events/276407816/ Slides http://github.com/mullikine/presentation-prompt-engineering-in-emacs/blob/master/presentation.pdf  Demonstration 
Prompt-Engineering Part 1: Building an environment Summary of talk I received a key for the OpenAI API 2 weeks ago, just a couple of days before my birthday.
I had applied around 5 to 10 times in the last year and I had finally been given a key.
I decided since the hour is late I would work on productivity tools that anyone can use, to facilitate programming in the new paradigm.</description>
    </item>
    
    <item>
      <title>OpenAI API for NLP</title>
      <link>http://semiosis.github.io/posts/openai-api-for-nlp/</link>
      <pubDate>Fri, 12 Jun 2020 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/posts/openai-api-for-nlp/</guid>
      <description>OpenAI API https://beta.openai.com/  Summary I&amp;rsquo;d like to add some OpenAI support to emacs. GPT-3 is easy to integrate because it is a very general-purpose transformer. In a later article, I&amp;rsquo;d like to integrate more specialised huggingface transformers.
Results Here are some of the things I had managed to do with emacs and GPT-3 so far.
 Imaginary programming with GPT-3 // Bodacious Blog  Here I assemble an imaginary programming environment in GPT-3.</description>
    </item>
    
    <item>
      <title>Review of &#39;[2006.03511] Unsupervised Translation of Programming Languages&#39;</title>
      <link>http://semiosis.github.io/reviews/review-of-2006-03511-unsupervised-translation-of-programming-languages/</link>
      <pubDate>Wed, 10 Jun 2020 00:00:00 +1200</pubDate>
      
      <guid>http://semiosis.github.io/reviews/review-of-2006-03511-unsupervised-translation-of-programming-languages/</guid>
      <description>Original article 2006.03511 Unsupervised Translation of Programming Languages News https://venturebeat.com/2020/06/08/facebooks-transcoder-ai-converts-code-from-one-programming-language-into-another/ Research Lample et al. Researcher Guillaume Lample Facebook AI Research glample@fb.com  Fully unsupervised neural transcompiler  Converts languages obtained from GitHub  BigQuery   unsupervised  it looks for previously undetected patterns in data sets without labels and with a minimal amount of human supervision   outperforms rule-based baselines by a “significant” margin.  Model of TransCoder   seq2seq with attention</description>
    </item>
    
    <item>
      <title>Setting up LSP with emacs (Go, Java, Python, Rust, C&#43;&#43;, Haskell, JS, TS, Ruby…)</title>
      <link>http://semiosis.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +1300</pubDate>
      
      <guid>http://semiosis.github.io/posts/setting-up-lsp-with-emacs-attempt-2/</guid>
      <description>Guides used https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/ https://github.com/emacs-lsp/lsp-java   1 2 3 4 5  Debug Adaptor Protocol DAP The LSP of debugging. https://code.visualstudio.com/blogs/2018/08/07/debug-adapter-protocol-website    State of languages with LSP in my own environment  Also, I&amp;rsquo;m using GPT-3 for:  code generation comment generation       Language LSP Working Fallback working Current user experience TabNine enabled REPL / Playground DAP (debug) Working Static analysis Complaints Custom LSP improvements     Go ✓ ✓ Amazing ✓ ✓  ✓ Go toolchain changes too quickly    Python ✓ ✓ Amazing ✓ ✓ ✓ ✓     Racket ✓ ✓ racket-mode Amazing  ✓  ✓     Java ✓ ✓ eclim Good ✓ ✓ (default) ✓ ✓ A little slow.</description>
    </item>
    
  </channel>
</rss>
